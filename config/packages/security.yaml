security:

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        api_user_provider:
            id: App\Security\User\ApiUserProvider
#        user_provider:
#            entity:
#                class: App\Entity\User
#                property: id

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

#        admin:
#            pattern: ^/admin
#            custom_authenticators:
#                - App\Security\AdminAuthenticator
#            stateless: false

        main:
            provider: api_user_provider
            custom_authenticators:
                - App\Security\Authenticator\ApiAuthenticator
            entry_point: App\Security\Authenticator\ApiAuthenticator
            logout:
                path: /logout
                target: /login
                invalidate_session: true
            stateless: false

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true




    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: ^/login_check$, roles: PUBLIC_ACCESS }
        - { path: ^/logout$, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: [ROLE_SUPER_ADMIN, ROLE_EDITOR_ADMIN] }
        - { path: ^/partner, roles: ROLE_PARTNER_ADMIN }
        - { path: ^/, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
